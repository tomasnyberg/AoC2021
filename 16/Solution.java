import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;
import java.math.BigInteger;

public class Solution {
    public static String[] exampleStrings = {
        "100010100000000001001010100000000001101010000000000000101111010001111",
        "01100010000000001000000000000000000101100001000101010110001011001000100000000010000100011000111000110100", // doesn't work
//       VVVTTTILLLLLLLLLLLLLLLVVVTTTILLLLLLLLLLLLLLL
        "1100000000000001010100000000000000000001011000010001010110100010111000001000000000101111000110000010001101000",
        "10100000000000010110110010001000000000010110001000000001011111000011011010000110101100011000101000111101010001111",

                                            };
    public static void main(String[] args){
        long start = System.currentTimeMillis();
        testParse();
        System.out.println(problemOne());
        System.out.println(problemTwo());
        System.out.println("This run took: "  + (System.currentTimeMillis() - start) +"ms");
    }

    public static void testParse(){
        boolean a = 16 == parseOperatorPacket(exampleStrings[0])[1];
        boolean b = 12 == parseOperatorPacket(exampleStrings[1])[1];
        boolean c = 23 == parseOperatorPacket(exampleStrings[2])[1];
        boolean d = 31 == parseOperatorPacket(exampleStrings[3])[1];
        boolean[] xs = {a, b, c,d};
        for(boolean x: xs){
            if(!x){
                System.out.println("Test b failed!");
                return;
            }
        }
        System.out.println("all test passed");
    }
    
    public static long problemOne(){
        // String longBinaryString = hexToBinary(parseInputToArray().get(0));
        // longBinaryString = longBinaryString.substring(0, longBinaryString.length()-6);
        // exampleStrings[1] doesn't work, the others do
        long[] totals = parseOperatorPacket(exampleStrings[4]);
        System.out.println(Arrays.toString(totals));
        return totals[1];
    }
    
    public static long[] parseOperatorPacket(String binaryString){
        long[] result = new long[3]; // first index length, second versionValue, third result (blank for now)
        long lenType = binaryString.charAt(6) == '1' ? 1:0;
        result[1] += Long.parseLong(binaryString.substring(0, 3), 2); // add the version value to our sum
        long lenInBits = 0;
        long lenInPackets = 0;
        if(lenType == 0){
            lenInBits = Long.parseLong(binaryString.substring(7, 22), 2);   
        } else {
            lenInPackets = Long.parseLong(binaryString.substring(7, 18), 2);
        }
        int j = lenType == 0 ? 22:18;
        while(lenInPackets > 0 || (j < 22 + lenInBits && lenInBits != 0)){
            lenInPackets--;
            if(binaryString.substring(j+3, j+6).equals("100")){ // If we have a literal value
                long[] lit = parseLiteral(binaryString.substring(j));
                j += lit[0]; // Skip over the literal
                result[1] += lit[2]; // Increment our versionValue;
            } else {
                long[] op = parseOperatorPacket(binaryString.substring(j));
                j += op[0]; // skip the entire length of the operator
                result[1] += op[1]; // Add the total versionValue from the nested operator
            }
        } 
        result[0] = j;
        return result;
    }


    // Seems to work
    public static long[] parseLiteral(String binaryString){ 
        // Determines how long a literal is so that we know where the next packet starts
        // Also returns the value of the literal
        // Example : "11110011010110101101001010001111001000010000" should return [28, 43690]  since 
        // It gets split like this : "1111001101011010110100101000 1111001000000000"
        long len = 0;
        long version = Long.parseLong(binaryString.substring(0, 3) , 2);
        StringBuilder sum = new StringBuilder();
        binaryString = binaryString.substring(6); // Cut off version ID and type id, len 6
        len += 6;
        int i = 0;
        while(binaryString.charAt(i) != '0'){
            sum.append(binaryString.substring(i+1, i+5));
            i += 5;
            len += 5;
        }
        sum.append(binaryString.substring(i+1, i+5));
        i += 5;
        len += 5;
        long value = Long.parseLong(sum.toString(), 2);
        long[] result = {len, value, version};
        return result;
    }

    public static long problemTwo(){
        return 0;
    }


    public static String hexToBinary(String hex) {
        return new BigInteger(hex, 16).toString(2);
    }


    public static ArrayList<String> parseInputToArray(){
        try {
            BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
            ArrayList<String> list = new ArrayList<>();
            String line = reader.readLine();
            while(line != null){
                list.add(line);
                line = reader.readLine();
            }
            reader.close();
            return list;
        } catch (Exception e){
            System.out.println("error");
            return null;
        }
    }

}
